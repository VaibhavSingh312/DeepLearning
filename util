{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPt8LRfc10eMPPfiUQjDSMw"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"r6UUovrkGNqg"},"outputs":[],"source":["import matplotlib.pyplot as plt\n","import tensorflow as tf\n","import time\n","import numpy as np\n","\n","from IPython import display as ipythondisplay\n","from string import Formatter\n","\n","\n","\n","\n","\n","def display_model(model):\n","  tf.keras.utils.plot_model(model,\n","             to_file='tmp.png',\n","             show_shapes=True)\n","  return ipythondisplay.Image('tmp.png')\n","\n","\n","def plot_sample(x,y,vae):\n","    plt.figure(figsize=(2,1))\n","    plt.subplot(1, 2, 1)\n","\n","    idx = np.where(y==1)[0][0]\n","    plt.imshow(x[idx])\n","    plt.grid(False)\n","\n","    plt.subplot(1, 2, 2)\n","    _, _, _, recon = vae(x)\n","    recon = np.clip(recon, 0, 1)\n","    plt.imshow(recon[idx])\n","    plt.grid(False)\n","\n","    plt.show()\n","\n","\n","\n","class LossHistory:\n","  def __init__(self, smoothing_factor=0.0):\n","    self.alpha = smoothing_factor\n","    self.loss = []\n","  def append(self, value):\n","    self.loss.append( self.alpha*self.loss[-1] + (1-self.alpha)*value if len(self.loss)>0 else value )\n","  def get(self):\n","    return self.loss\n","\n","class PeriodicPlotter:\n","  def __init__(self, sec, xlabel='', ylabel='', scale=None):\n","\n","    self.xlabel = xlabel\n","    self.ylabel = ylabel\n","    self.sec = sec\n","    self.scale = scale\n","\n","    self.tic = time.time()\n","\n","  def plot(self, data):\n","    if time.time() - self.tic > self.sec:\n","      plt.cla()\n","\n","      if self.scale is None:\n","        plt.plot(data)\n","      elif self.scale == 'semilogx':\n","        plt.semilogx(data)\n","      elif self.scale == 'semilogy':\n","        plt.semilogy(data)\n","      elif self.scale == 'loglog':\n","        plt.loglog(data)\n","      else:\n","        raise ValueError(\"unrecognized parameter scale {}\".format(self.scale))\n","\n","      plt.xlabel(self.xlabel); plt.ylabel(self.ylabel)\n","      ipythondisplay.clear_output(wait=True)\n","      ipythondisplay.display(plt.gcf())\n","\n","      self.tic = time.time()"]}]}